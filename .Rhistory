initial <- 0.5
# initial <- 0.4
zero.f <- zero_nwt_safe(f,f.prime,initial) # 4 are not enough
if(is.null(zero.f)) {
cat("Precision not reached")
} else {
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f)))
}
###################
# test program for zero_nwt_safe
# initial <- 0.5
initial <- 0.4
zero.f <- zero_nwt_safe(f,f.prime,initial) # 4 are not enough
if(is.null(zero.f)) {
cat("Precision not reached")
} else {
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f)))
}
source('~/OneDrive - Alma Mater Studiorum Università di Bologna/Didattica/Informatics/0_R/R-class/R_class-delivery/example051_newton_tracking.R')
source('~/OneDrive - Alma Mater Studiorum Università di Bologna/Didattica/Informatics/0_R/R-class/R_class-delivery/example051_newton_tracking.R')
rm(list = ls())
#
# algo:
# - use guess as first value to check, storing it in x
# - repeat max_loop times
#   - if the function in x is less than the tolerance
#     - return x as the result
#   - compute new value  to check with the tangent method
#     and store it in the current position of x
# - if comes here, the precision has not been reached and returns null
#
zero_nwt_tracking <- function(f, f.prime
, guess = 0
, tol = 10E-7
, max_loop = 10E3
){
t <- 1
x <- vector(mode = "numeric")
x[t] <- guess
for (i in 1:max_loop){
if (abs(f(x[t])) <= tol){
return(list(zero = x[t], track = x))
}
x[t+1] <- x[t] - f(x[t]) / f.prime(x[t])
t <- t + 1
}
return(NULL)
}
# converges with any value
# f <- function(x) {x^3 - 2 * x + 2}
# f.prime <- function(x) {3 * x^2 - 2}
# initial <- 1
#
# example of non convergence when guess >abs(1/sqrt(2))
f <- function(x) {x * exp(-x^2)}
f.prime <- function(x) {-(2 * x^2 -1) * exp(-x^2)}
# initial <- 0.499 # try 0.5 for non convergence
initial <- 0.5 # try 0.5 for non convergence
#curve(f, from = -10, to = 2)
curve(f, from = -2, to = 2)
wait <- 1
result <- zero_nwt_tracking(f, f.prime, initial)
if (!is.null(result)) {
hc <- heat.colors(length(result$track) * 2)
for (i in seq_along(result$track)) {
points(result$track[i], f(result$track[i]), col = hc[i])
Sys.sleep(wait)
wait <- wait * 0.9
}
text(  result$zero, f(result$zero)
, labels = paste("Zero in "
,round(result$zero,2)
," Steps: ",length(result$track))
, cex = 0.7
, pos = 3)
} else {
print("Precision not reached")
}
initial <- 0.499 # try 0.5 for non convergence
#curve(f, from = -10, to = 2)
curve(f, from = -2, to = 2)
wait <- 1
result <- zero_nwt_tracking(f, f.prime, initial)
if (!is.null(result)) {
hc <- heat.colors(length(result$track) * 2)
for (i in seq_along(result$track)) {
points(result$track[i], f(result$track[i]), col = hc[i])
Sys.sleep(wait)
wait <- wait * 0.9
}
text(  result$zero, f(result$zero)
, labels = paste("Zero in "
,round(result$zero,2)
," Steps: ",length(result$track))
, cex = 0.7
, pos = 3)
} else {
print("Precision not reached")
}
rm(list = ls())
left <- -3
right <- 3
# f <- function(x) {x^3 + 2 * x^2 - 7}
# f.prime <- function(x) {3 * x^2 + 4 * x}
f <- function(x) {x^3 - 2 * x + 2}
#          is greater than the tolerance
#   - if f(left)*f(x) < 0
#       right <- x , since the zero was between left
#                    and x
#     else
#       left <- x,  since the zero was between x and right
#   - set x to the midpoint between left and right
# - the loop stops when the desired precision is reached
# - return x
#
zero_bisect <- function(f, left, right, tol = 10E-7){
x <- (left + right) / 2
while (abs(f(x)) > tol){
if (f(left) * f(x) < 0)
right <- x
else
left <- x
x <- (left + right) / 2
} # end: while (abs(f(x)) > tol)
return(x)
}
# ################################
# test code
if (f(left) * f(right) < 0)
print("Initial values are OK")
result <- zero_bisect(f, left, right)
curve(f, from = left, to = right,
main = "Find the zero for x^3 - 2 * x + 2")
text(  result, f(result)
, labels = paste("Zero in "
, round(result,2))
, cex = 0.7, pos = 3)
points(x = result, y = 0, type = "b")
abline(h = 0)
rm(list = ls())
# function to be minimized
f <- function(x){
abs(x - 3.5) + (x - 2)^2
}
rm(list = ls())
# use:
# x:     value of x to be checked
#
# algo:
# - use guess as first value to check, storing it in x
# - repeat if the absolute value of the function in x
#      is greater than the tolerance
#   - x <- new value to check with the tangent method
# - the loop stops when the desired precision is reached
#
zero_nwt <- function(f, f.prime, guess = 0, tol = 10E-7){
x <- guess
# while (abs(f(x)) > tol){
#   x <- x - f(x) / f.prime(x)
# }
repeat {
x <- x - f(x) / f.prime(x)
if (abs(f(x)) <= tol)
break
} # repeat
return(x)
}
f <- function(x){
return(x^2+1)
}
f.prime <- function(x){
return(2*x)
}
# test code for zero_nwt
# initial <- pi/2 + 0.1
# initial <- 0.1
# initial <- -0.4
initial <- 0.4
# initial <- 0.499
# initial <- 0.5
zero.f <- zero_nwt(f,f.prime,initial)
# test code for zero_nwt
# initial <- pi/2 + 0.1
# initial <- 0.1
# initial <- -0.4
# initial <- 0.4
initial <- 0.499
# initial <- 0.5
zero.f <- zero_nwt(f,f.prime,initial)
curve(f, -5,5)
f <- function(x){
return(x^2-1)
}
f.prime <- function(x){
return(2*x)
}
# test code for zero_nwt
# initial <- pi/2 + 0.1
# initial <- 0.1
# initial <- -0.4
# initial <- 0.4
initial <- 0.499
# initial <- 0.5
zero.f <- zero_nwt(f,f.prime,initial)
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f))
)
curve(f, -5,5)
f <- function(x){
return(x^2-1)
}
curve(f, -5,5)
f(-1)
return(x^2-2)
f <- function(x){
return(x^2-2)
}
curve(f, -5,5)
curve(f, -1,1)
curve(f, -2,2)
# test code for zero_nwt
# initial <- pi/2 + 0.1
# initial <- 0.1
# initial <- -0.4
# initial <- 0.4
initial <- 0.499
# initial <- 0.5
zero.f <- zero_nwt(f,f.prime,initial)
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f))
)
rm(list = ls())
left <- -3
right <- 3
# f <- function(x) {x^3 + 2 * x^2 - 7}
# f.prime <- function(x) {3 * x^2 + 4 * x}
f <- function(x) {x^3 - 2 * x + 2}
#          is greater than the tolerance
#   - if f(left)*f(x) < 0
#       right <- x , since the zero was between left
#                    and x
#     else
#       left <- x,  since the zero was between x and right
#   - set x to the midpoint between left and right
# - the loop stops when the desired precision is reached
# - return x
#
zero_bisect <- function(f, left, right, tol = 10E-7){
x <- (left + right) / 2
while (abs(f(x)) > tol){
if (f(left) * f(x) < 0)
right <- x
else
left <- x
x <- (left + right) / 2
} # end: while (abs(f(x)) > tol)
return(x)
}
# ################################
# test code
if (f(left) * f(right) < 0)
print("Initial values are OK")
result <- zero_bisect(f, left, right)
curve(f, from = left, to = right,
main = "Find the zero for x^3 - 2 * x + 2")
text(  result, f(result)
, labels = paste("Zero in "
, round(result,2))
, cex = 0.7, pos = 3)
points(x = result, y = 0, type = "b")
abline(h = 0)
f.prime <- function(x){
return(3*x-2)
}
# test code for zero_nwt
# initial <- pi/2 + 0.1
# initial <- 0.1
# initial <- -0.4
# initial <- 0.4
initial <- 0.499
initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
rm(list = ls())
# use:
# x:     value of x to be checked
#
# algo:
# - use guess as first value to check, storing it in x
# - repeat if the absolute value of the function in x
#      is greater than the tolerance
#   - x <- new value to check with the tangent method
# - the loop stops when the desired precision is reached
#
zero_nwt <- function(f, f.prime, guess = 0, tol = 10E-7){
x <- guess
# while (abs(f(x)) > tol){
#   x <- x - f(x) / f.prime(x)
# }
repeat {
x <- x - f(x) / f.prime(x)
if (abs(f(x)) <= tol)
break
} # repeat
return(x)
}
f <- function(x) {x^3 - 2 * x + 2}
f.prime <- function(x){
return(3*x-2)
}
# test code for zero_nwt
initial <- 0.499
initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
f <- function(x) {x^3 - 2 * x + 2}
f.prime <- function(x){
return(3*x^2-2)
}
# test code for zero_nwt
initial <- 0.499
initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f))
)
# test code for zero_nwt
initial <- 2
# initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
cat(paste("x = "
, zero.f
, "f(x) = "
,f(zero.f))
)
# test code for zero_nwt
initial <- 10
# initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
# use:
# x:     value of x to be checked
#
# algo:
# - use guess as first value to check, storing it in x
# - repeat if the absolute value of the function in x
#      is greater than the tolerance
#   - x <- new value to check with the tangent method
# - the loop stops when the desired precision is reached
#
zero_nwt <- function(f, f.prime, guess = 0, tol = 10E-7){
x <- guess
# while (abs(f(x)) > tol){
#   x <- x - f(x) / f.prime(x)
# }
repeat {
x <- x - f(x) / f.prime(x)
print(x)
if (abs(f(x)) <= tol)
break
} # repeat
return(x)
}
f <- function(x) {x^3 - 2 * x + 2}
f.prime <- function(x){
return(3*x^2-2)
}
# test code for zero_nwt
initial <- 10
# initial <- -2
zero.f <- zero_nwt(f,f.prime,initial)
source('~/OneDrive - Alma Mater Studiorum Università di Bologna/Didattica/Informatics/0_R/R-class/R_class-delivery/montecarlo/montecarlo_pi.R')
nthrows <- 100
# for (i in 1:nthrows){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
d <- apply(m, 1, function(x,y) sqrt(x^2 + y^2) <= 1)
rowNorms(m)
install.packages("wordspace")
require(wordspace)
rowNorms(m)
n <- rowNorms(m)
in_out <- n <= 1
count <- sum(n <= 1)
count
pi_estimate_vec <- function(nthrows = 100){
count <- 0
# for (i in 1:nthrows){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
d <- apply(m, 1, function(x,y) sqrt(x^2 + y^2) <= 1)
n <- rowNorms(m)
count <- sum(n <= 1)
# }
return(4 * count / nthrows)
}
n <- 1000000
set.seed(42)
print(system.time({pi_est <- pi_estimate_vec(n)}))
pi_estimate_vec <- function(nthrows = 100){
count <- 0
# for (i in 1:nthrows){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
n <- rowNorms(m)
count <- sum(n <= 1)
# }
return(4 * count / nthrows)
}
set.seed(42)
print(system.time({pi_est <- pi_estimate_vec(n)}))
#pi_est <- pi_estimate(n)
cat("The estimation of PI with ", n, "throws is ")
cat(pi_est, "\n")
print(system.time({pi_est <- pi_estimate(n)}))
pi_estimate_vec <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
n <- rowNorms(m)
return(n <= 1)
}
pi_estimate_vec <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
in_out <- rowNorms(m) <= 1
return(cbind(m,in_out))
}
in_out <- pi_estimate_vec_wd(n)
pi_estimate_vec_wd <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
in_out <- rowNorms(m) <= 1
return(cbind(m,in_out))
}
pi_estimate_vec_wd <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
in_out <- rowNorms(m) <= 1
df <- data.frame(cbind(x,y,in_out))
names(df) <- c("x","y","in")
return(df)
}
pi_estimate_vec_wd <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
in_out <- rowNorms(m) <= 1
df <- data.frame(cbind(x,y,in_out))
names(df) <- c("x","y","in")
return(df)
}
df <- pi_estimate_vec_wd(n)
View(df)
plot(df$x, df$y, col = df$in)
View(df)
plot(df$x, df$y, col = df[3])
typeof(df[1,3])
df
# n <- 1000000
n <- 10000
set.seed(42)
in_out <- pi_estimate_vec_wd(n)
plot(in_out$x, in_out$y, col = in_out$in)
plot(in_out$x, in_out$y, col = in_out[,3])
nrow(in_out)
sum(in_out[,3])
sum(in_out[,3])/4
sum(in_out[,3])/4
sum(in_out[,3])
4*sum(in_out[,3])/nthrows
pi_estimate_vec_wd <- function(nthrows = 100){
x <- runif(nthrows,-1, 1)
y <- runif(nthrows,-1, 1)
m <- cbind(x,y)
in_out <- as.character(rowNorms(m) <= 1)
df <- data.frame(cbind(x,y,in_out))
names(df) <- c("x","y","in")
return(df)
}
# n <- 1000000
n <- 10000
set.seed(42)
print("Running pi_estimate")
print(system.time({pi_est <- pi_estimate(n)}))
set.seed(42)
print("Running pi_estimate_vec")
print(system.time({pi_est <- pi_estimate_vec(n)}))
#pi_est <- pi_estimate(n)
cat("The estimation of PI with ", n, "throws is ")
cat(pi_est, "\n")
cat("The error is "
, sprintf(" %.6f%%", abs(pi_est - pi) / pi * 100)
, sep = "")
in_out <- pi_estimate_vec_wd(n)
View(in_out)
plot(in_out$x, in_out$y, col = in_out[,3])
